#!/usr/bin/env python
#!coding:utf-8
#author: khazix
#github: https://github.com/demonxian3/auto-ssh-login.git

#language:
# - python27

#require:
# - pip install pexpect
# - pip install PyYAML

#usage:
# - autossh
# - autossh myserv <Enter>
# - autossh myserv up source.zip
# - autossh myserv dn /root/test.tgz

import os
import sys
import pexpect
import time
import struct
import fcntl
import termios
import signal
from yaml import load

config = "/etc/server.yaml";

def sigwinch_passthrough (sig, data):
    # Check for buggy platforms (see pexpect.setwinsize()).
    if 'TIOCGWINSZ' in dir(termios):
        TIOCGWINSZ = termios.TIOCGWINSZ
    else:
        TIOCGWINSZ = 1074295912 # assume
    s = struct.pack ("HHHH", 0, 0, 0, 0)
    a = struct.unpack ('HHHH', fcntl.ioctl(sys.stdout.fileno(), TIOCGWINSZ , s))
    global global_pexpect_instance
    global_pexpect_instance.setwinsize(a[0],a[1])


def getwinsize():
    """This returns the window size of the child tty.
    The return value is a tuple of (rows, cols).
    """
    if 'TIOCGWINSZ' in dir(termios):
        TIOCGWINSZ = termios.TIOCGWINSZ
    else:
        TIOCGWINSZ = 1074295912L # Assume
    s = struct.pack('HHHH', 0, 0, 0, 0)
    x = fcntl.ioctl(sys.stdout.fileno(), TIOCGWINSZ, s)
    return struct.unpack('HHHH', x)[0:2]


def getValue(name, key):
    return server[name][key] if key in server[name] else server['default'][key]

def putInfor(name):
    for key in server[name]:
        print "{}: {}".format(key,server[name][key]);
    sys.exit();

def autossh(spawn, pwd):
    ssh = pexpect.spawn(spawn);
    #ssh = pexpect.spawn('ssh %s@%s -p %s' % (user, host, port));

    global global_pexpect_instance;
    global_pexpect_instance = ssh;
    signal.signal(signal.SIGWINCH, sigwinch_passthrough)
    winsize = getwinsize();
    ssh.setwinsize(winsize[0], winsize[1])

    i = ssh.expect (['password:', 'yes/no'], timeout=3)
    if i == 0:
        ssh.sendline(pwd);
    elif i == 1:
        ssh.sendline('yes\n');
        ssh.expect('password:', timeout=3);
        ssh.sendline(pwd);
    ssh.interact();

with open(config) as fp:
    server = load(fp.read());

if len(sys.argv) <= 1:
    for name in server:
        print name;
    sys.exit();

name = sys.argv[1];

fn = '' if len(sys.argv)<=3 else sys.argv[3];
action = 'ssh' if len(sys.argv)<=3 else sys.argv[2];

if name in server:

    pwd = server[name]['pass'];
    host = server[name]['host'];
    user = getValue(name, 'user');
    port = getValue(name, 'port');
    serv = getValue(name, 'serv');

    if serv == 'ssh':
        if action == 'dn':
            spawn = 'scp -P {} {}@{}:{} .'.format(port,user,host,fn);
        elif action == 'up':
            spawn = 'scp -P {} {} {}@{}:/tmp '.format(port, fn,user,host)
        else:
            spawn = 'ssh -p {} {}@{}'.format(port, user, host);
        autossh(spawn, pwd);

    else:
        putInfor(name);
        if server[name]['exec']:
            os.system(server[name]['exec']);

